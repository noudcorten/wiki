{"config":{"lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"DemaTrading.ai backtesting engine # Download the Engine as zip folder Follow @dema-trading-ai on Github Join our Discord server for updates, support, our community, and more Get me started # Contest # DemaTrading.ai is launching its very own bot contest! There are prizes to be won, battles to be fought, and we\u2019re excited to see every single one of you participate. During the contest, we\u2019ll run the bots, and the three bots that perform the best at the end of the competition period will be the ones to win some amazing prizes! Stay tuned on our Discord server for the results, and for future bot contests! Start here for a quick introduction to Github Desktop! Introduction # The DemaTrading.ai Engine is an open source backtesting Engine for cryptocurrency trading as a part of DemaTrading . The Engine is completely written in the programming language Python ( click here to download Python ). Some experience with Python makes this process easier, however with some effort this project should be runnable for everyone, no matter your experience with coding. Support # For any questions not covered by the documentation, or for further questions regarding the engine, trading, your own strategies, your algorithms, or just a chit chat with like-minded individuals, you are more than welcome join our Discord server, where we will facilitate whatever need you may have. Click here to join our Discord server Ready to start? # Getting started , the term sheet , and examples of strategies are waiting for you!","title":"Home"},{"location":"#dematradingai-backtesting-engine","text":"Download the Engine as zip folder Follow @dema-trading-ai on Github Join our Discord server for updates, support, our community, and more","title":"DemaTrading.ai backtesting engine"},{"location":"#get-me-started","text":"","title":"Get me started"},{"location":"#contest","text":"DemaTrading.ai is launching its very own bot contest! There are prizes to be won, battles to be fought, and we\u2019re excited to see every single one of you participate. During the contest, we\u2019ll run the bots, and the three bots that perform the best at the end of the competition period will be the ones to win some amazing prizes! Stay tuned on our Discord server for the results, and for future bot contests! Start here for a quick introduction to Github Desktop!","title":"Contest"},{"location":"#introduction","text":"The DemaTrading.ai Engine is an open source backtesting Engine for cryptocurrency trading as a part of DemaTrading . The Engine is completely written in the programming language Python ( click here to download Python ). Some experience with Python makes this process easier, however with some effort this project should be runnable for everyone, no matter your experience with coding.","title":"Introduction"},{"location":"#support","text":"For any questions not covered by the documentation, or for further questions regarding the engine, trading, your own strategies, your algorithms, or just a chit chat with like-minded individuals, you are more than welcome join our Discord server, where we will facilitate whatever need you may have. Click here to join our Discord server","title":"Support"},{"location":"#ready-to-start","text":"Getting started , the term sheet , and examples of strategies are waiting for you!","title":"Ready to start?"},{"location":"changelog/knownbugs/","text":"Known issues and bugs # v0.1 - v0.2 # Version 0.1 - 0.2 contains bugs in the following features: Backtesting until now (config backtesting_till_now: \"True\" ) sometimes gives errors when mounting local volumes. The fix to this is to manually delete the /data/binance folder. Backtesting is a little slow now, we are working on improvements in terms of speed.","title":"Current known bugs"},{"location":"changelog/knownbugs/#known-issues-and-bugs","text":"","title":"Known issues and bugs"},{"location":"changelog/knownbugs/#v01-v02","text":"Version 0.1 - 0.2 contains bugs in the following features: Backtesting until now (config backtesting_till_now: \"True\" ) sometimes gives errors when mounting local volumes. The fix to this is to manually delete the /data/binance folder. Backtesting is a little slow now, we are working on improvements in terms of speed.","title":"v0.1 - v0.2"},{"location":"changelog/majorchanges/","text":"Overview of all major changes per version # v0.5 - v0.6 # Fixed several bugs in the profit calculation Fixed stoploss not triggering bug Fixed roi not triggering bug Plot readability improved Improved realized and seen drawdown calculation Improved marketchange calculation v0.4 - v0.5 # Fixed wrong avg trade duration Changed the way 'spend_amount' (trade value for new trade) is defined. This will prevent the portfolio from becomming unbalanced (e.g. 1/4 budget in one trade and 3/4 budget in another trade) Old: (1 / available_spaces) * budget New: (1 / amount_of_pairs) * budget Fixed incorrect drawdown calculations for 'backtest results' Fixed incorrect drawdown calculations for 'per coin insights' Changed profit percentage columns for 'per coin insights' Now consists of 'avg profit', 'cum profit' and 'total profit' Profit percentages only include closed trades and not open trades (these are shown in 'left open trades' table) Renamed metrics in results table: Max drawdown bad trade train -> most consecutive losses Most drawdown 1 trade -> Worst trade Seen drawdown from -> Max seen drawdown from Seen drawdown to -> Max seen drawdown to [Removed] Max drawdown trades Added average marketchange of BTC and whitelisted coins Fixed incorrect use of downloaded .json data Updated dynamic stoploss warning Changed plots argument to boolean Removed if statement from advanced_strategy v0.3 - v0.4 # Several bugfixes Enhanced backtesting overview Added plotting possibilities Added Dynamic- and Trailing stoploss Added QtpyLib Development Image Publishing pipeline Added CLI support v0.2 - v0.3 # 140% decrease of backtest time. docker-compose file with proper volume mounting new progress bars checks for missing ticks small optimizations moved docs to separate repository dynamic stoploss v0.1 - v0.2 # Easy strategy customization OHLCV data in dataframe Release / test pipelines Progress bar for time indication Enhanced backtest results Automatically downloading data Configurable base currency Documentation setup Dockerized the whole engine Fee support Documentation additions","title":"Major changes"},{"location":"changelog/majorchanges/#overview-of-all-major-changes-per-version","text":"","title":"Overview of all major changes per version"},{"location":"changelog/majorchanges/#v05-v06","text":"Fixed several bugs in the profit calculation Fixed stoploss not triggering bug Fixed roi not triggering bug Plot readability improved Improved realized and seen drawdown calculation Improved marketchange calculation","title":"v0.5 - v0.6"},{"location":"changelog/majorchanges/#v04-v05","text":"Fixed wrong avg trade duration Changed the way 'spend_amount' (trade value for new trade) is defined. This will prevent the portfolio from becomming unbalanced (e.g. 1/4 budget in one trade and 3/4 budget in another trade) Old: (1 / available_spaces) * budget New: (1 / amount_of_pairs) * budget Fixed incorrect drawdown calculations for 'backtest results' Fixed incorrect drawdown calculations for 'per coin insights' Changed profit percentage columns for 'per coin insights' Now consists of 'avg profit', 'cum profit' and 'total profit' Profit percentages only include closed trades and not open trades (these are shown in 'left open trades' table) Renamed metrics in results table: Max drawdown bad trade train -> most consecutive losses Most drawdown 1 trade -> Worst trade Seen drawdown from -> Max seen drawdown from Seen drawdown to -> Max seen drawdown to [Removed] Max drawdown trades Added average marketchange of BTC and whitelisted coins Fixed incorrect use of downloaded .json data Updated dynamic stoploss warning Changed plots argument to boolean Removed if statement from advanced_strategy","title":"v0.4 - v0.5"},{"location":"changelog/majorchanges/#v03-v04","text":"Several bugfixes Enhanced backtesting overview Added plotting possibilities Added Dynamic- and Trailing stoploss Added QtpyLib Development Image Publishing pipeline Added CLI support","title":"v0.3 - v0.4"},{"location":"changelog/majorchanges/#v02-v03","text":"140% decrease of backtest time. docker-compose file with proper volume mounting new progress bars checks for missing ticks small optimizations moved docs to separate repository dynamic stoploss","title":"v0.2 - v0.3"},{"location":"changelog/majorchanges/#v01-v02","text":"Easy strategy customization OHLCV data in dataframe Release / test pipelines Progress bar for time indication Enhanced backtest results Automatically downloading data Configurable base currency Documentation setup Dockerized the whole engine Fee support Documentation additions","title":"v0.1 - v0.2"},{"location":"changelog/v01/","text":"Version 0.1 # First release including features: Easy strategy customization OHLCV data in dataframe Release / test pipelines Progress bar for time indication Enhanced backtest results Automatically downloading data Configurable base currency Documentation setup Dockerized the whole engine","title":"V0.1"},{"location":"changelog/v01/#version-01","text":"First release including features: Easy strategy customization OHLCV data in dataframe Release / test pipelines Progress bar for time indication Enhanced backtest results Automatically downloading data Configurable base currency Documentation setup Dockerized the whole engine","title":"Version 0.1"},{"location":"changelog/v02/","text":"Version 0.2 # Stable beta release with added features: Added fee-support Improved overall results overview Improved documentation","title":"v0.2"},{"location":"changelog/v02/#version-02","text":"Stable beta release with added features: Added fee-support Improved overall results overview Improved documentation","title":"Version 0.2"},{"location":"changelog/v03/","text":"Version 0.3 # Stable beta release with added features: 140% decrease of backtest time. docker-compose file with proper volume mounting new progress bars checks for missing ticks small optimizations moved docs to separate repository dynamic stoploss","title":"v0.3"},{"location":"changelog/v03/#version-03","text":"Stable beta release with added features: 140% decrease of backtest time. docker-compose file with proper volume mounting new progress bars checks for missing ticks small optimizations moved docs to separate repository dynamic stoploss","title":"Version 0.3"},{"location":"changelog/v04/","text":"Version 0.4 # Stable beta release with added features: Several bugfixes Enhanced backtesting overview Added plotting possibilities Added Dynamic- and Trailing stoploss Added QtpyLib Development Image Publishing pipeline Added CLI support","title":"v0.4"},{"location":"changelog/v04/#version-04","text":"Stable beta release with added features: Several bugfixes Enhanced backtesting overview Added plotting possibilities Added Dynamic- and Trailing stoploss Added QtpyLib Development Image Publishing pipeline Added CLI support","title":"Version 0.4"},{"location":"changelog/v05/","text":"Version 0.5 # Stable beta release with added features: Fixed wrong avg trade duration Changed the way 'spend_amount' (trade value for new trade) is defined. This will prevent the portfolio from becomming unbalanced (e.g. 1/4 budget in one trade and 3/4 budget in another trade) Old: (1 / available_spaces) * budget New: (1 / amount_of_pairs) * budget Fixed incorrect drawdown calculations for 'backtest results' Fixed incorrect drawdown calculations for 'per coin insights' Changed profit percentage columns for 'per coin insights' Now consists of 'avg profit', 'cum profit' and 'total profit' Profit percentages only include closed trades and not open trades (these are shown in 'left open trades' table) Renamed metrics in results table: Max drawdown bad trade train -> most consecutive losses Most drawdown 1 trade -> Worst trade Seen drawdown from -> Max seen drawdown from Seen drawdown to -> Max seen drawdown to [Removed] Max drawdown trades Added average marketchange of BTC and whitelisted coins Fixed incorrect use of downloaded .json data Updated dynamic stoploss warning Changed plots argument to boolean Removed if statement from advanced_strategy","title":"v0.5"},{"location":"changelog/v05/#version-05","text":"Stable beta release with added features: Fixed wrong avg trade duration Changed the way 'spend_amount' (trade value for new trade) is defined. This will prevent the portfolio from becomming unbalanced (e.g. 1/4 budget in one trade and 3/4 budget in another trade) Old: (1 / available_spaces) * budget New: (1 / amount_of_pairs) * budget Fixed incorrect drawdown calculations for 'backtest results' Fixed incorrect drawdown calculations for 'per coin insights' Changed profit percentage columns for 'per coin insights' Now consists of 'avg profit', 'cum profit' and 'total profit' Profit percentages only include closed trades and not open trades (these are shown in 'left open trades' table) Renamed metrics in results table: Max drawdown bad trade train -> most consecutive losses Most drawdown 1 trade -> Worst trade Seen drawdown from -> Max seen drawdown from Seen drawdown to -> Max seen drawdown to [Removed] Max drawdown trades Added average marketchange of BTC and whitelisted coins Fixed incorrect use of downloaded .json data Updated dynamic stoploss warning Changed plots argument to boolean Removed if statement from advanced_strategy","title":"Version 0.5"},{"location":"changelog/v06/","text":"Version 0.6 # Stable beta release with added features: Temporary removal of the various statistics that have not been tested yet: # Coin insights Left open trades results Additions: # Rigorous testing and improvement of all current statistics Refactoring of the entire engine Improvement of plot readability","title":"v0.6"},{"location":"changelog/v06/#version-06","text":"Stable beta release with added features:","title":"Version 0.6"},{"location":"changelog/v06/#temporary-removal-of-the-various-statistics-that-have-not-been-tested-yet","text":"Coin insights Left open trades results","title":"Temporary removal of the various statistics that have not been tested yet:"},{"location":"changelog/v06/#additions","text":"Rigorous testing and improvement of all current statistics Refactoring of the entire engine Improvement of plot readability","title":"Additions:"},{"location":"getting_paid/algocreatorpaid/","text":"How we can help you with the monetisation of your algorithm # At DemaTrading.ai we aim to facilitate you - as an algorithm supplier - with a platform for your algorithms, and strategies to flourish. Founded with the vision in mind to be able to be a partner for everyone no matter the experience, we help traders to automate, optimise, and monetise their trading strategies. No experience in trading? No experience with the complicated programming? We can and will help you with your learning journey! For manual traders # If you have a strategy you've created manually, stuck in your mind or written on paper, but you're uncertain as to how to automate it, and to make your strategy work with automated trading fret not! We can automate it for you, depending on your strategy, and support you by answering all possible questions you may have through our engine support channel where we aim to solve your issue as soon as possible. For algorithm creators # As the algorithm creator, you'll be able to host your strategies, enjoy profit off it, and receive both instant feedback and optimization of your algorithm. Whether you have the trading knowledge or the coding knowledge, DemaTrading is there for you. Sign contract: you sign a contract with us, which will be provided after a brief conversation with us (follows the local laws and the European laws; we're registered in Amsterdam). Test and validate: we test the algorithm you provide us and test it, see whether it is valid or not and whether it is a strategy all parties can profit off of. Optimize: we or you - in conjunction with us - optimize the algorithm, ensure it can work on our platform without fail nor error. Sandbox: in the sandbox period, we dry-run the algorithm, ensuring that it will actually function and that it will be profitable for everyone involved. Going live: the final step. Your algorithm is now live! Time to earn some money! Once in the live setting, your algorithm will be making profit over every single trade made with the algorithm, the amount you earn is based on the trades per month, the volume invested in your algorithm. Based off the volume and the trades per month, you'll receive a monthly income that in turn is a percentage of the fee of every trade. Disclaimer: the fee in the algorithm needs to be 0.0025 (2.5%) How do I know whether my bot is good? # When backtesting your bot, the projected drawdown will be key. If your bot reaches a -80% drawdown and ends any and all time periods with losses rather than profits, then it won't be going far. However, if your bot only reaches a -10% dropdown and ends up with a solid profit on the vast majority of the trades made then your bot will be able to be pushed live once it makes it through the aforementioned 5 steps.","title":"For algo creators"},{"location":"getting_paid/algocreatorpaid/#how-we-can-help-you-with-the-monetisation-of-your-algorithm","text":"At DemaTrading.ai we aim to facilitate you - as an algorithm supplier - with a platform for your algorithms, and strategies to flourish. Founded with the vision in mind to be able to be a partner for everyone no matter the experience, we help traders to automate, optimise, and monetise their trading strategies. No experience in trading? No experience with the complicated programming? We can and will help you with your learning journey!","title":"How we can help you with the monetisation of your algorithm"},{"location":"getting_paid/algocreatorpaid/#for-manual-traders","text":"If you have a strategy you've created manually, stuck in your mind or written on paper, but you're uncertain as to how to automate it, and to make your strategy work with automated trading fret not! We can automate it for you, depending on your strategy, and support you by answering all possible questions you may have through our engine support channel where we aim to solve your issue as soon as possible.","title":"For manual traders"},{"location":"getting_paid/algocreatorpaid/#for-algorithm-creators","text":"As the algorithm creator, you'll be able to host your strategies, enjoy profit off it, and receive both instant feedback and optimization of your algorithm. Whether you have the trading knowledge or the coding knowledge, DemaTrading is there for you. Sign contract: you sign a contract with us, which will be provided after a brief conversation with us (follows the local laws and the European laws; we're registered in Amsterdam). Test and validate: we test the algorithm you provide us and test it, see whether it is valid or not and whether it is a strategy all parties can profit off of. Optimize: we or you - in conjunction with us - optimize the algorithm, ensure it can work on our platform without fail nor error. Sandbox: in the sandbox period, we dry-run the algorithm, ensuring that it will actually function and that it will be profitable for everyone involved. Going live: the final step. Your algorithm is now live! Time to earn some money! Once in the live setting, your algorithm will be making profit over every single trade made with the algorithm, the amount you earn is based on the trades per month, the volume invested in your algorithm. Based off the volume and the trades per month, you'll receive a monthly income that in turn is a percentage of the fee of every trade. Disclaimer: the fee in the algorithm needs to be 0.0025 (2.5%)","title":"For algorithm creators"},{"location":"getting_paid/algocreatorpaid/#how-do-i-know-whether-my-bot-is-good","text":"When backtesting your bot, the projected drawdown will be key. If your bot reaches a -80% drawdown and ends any and all time periods with losses rather than profits, then it won't be going far. However, if your bot only reaches a -10% dropdown and ends up with a solid profit on the vast majority of the trades made then your bot will be able to be pushed live once it makes it through the aforementioned 5 steps.","title":"How do I know whether my bot is good?"},{"location":"getting_paid/investorpaid/","text":"Investing in our algorithms # You might be asking yourself; why would I invest in the algorithms offered via DemaTrading.ai? The answer? The bots we offer are automated to trade and to do it properly, maximizing your profit on a daily basis if you aim to have daily trades. Your money will be invested into these bots and without even a single worry on your mind nor sleep deprivation nor stressing in the middle of the night, it will all be done automatically. These bots will invest in a coin of your choice (within the top 30) and trade for you. Our bots are backtested, optimized, and upheld to a high standard; for you - as an investor - we aim to minimize any potential losses, any kind of drawdown, and ensure there are appropriate measures to ensure your funds are in good hands.","title":"For investors"},{"location":"getting_paid/investorpaid/#investing-in-our-algorithms","text":"You might be asking yourself; why would I invest in the algorithms offered via DemaTrading.ai? The answer? The bots we offer are automated to trade and to do it properly, maximizing your profit on a daily basis if you aim to have daily trades. Your money will be invested into these bots and without even a single worry on your mind nor sleep deprivation nor stressing in the middle of the night, it will all be done automatically. These bots will invest in a coin of your choice (within the top 30) and trade for you. Our bots are backtested, optimized, and upheld to a high standard; for you - as an investor - we aim to minimize any potential losses, any kind of drawdown, and ensure there are appropriate measures to ensure your funds are in good hands.","title":"Investing in our algorithms"},{"location":"getting_started/installation/configuring_backtest/","text":"Configuring your backtest # Configuration # In the config.json file you will find all necessary and important configuration options. ROI # The ROI table in the configuration is used to sell at a certain percentage of profit after a defined time. The keys in the dictionary are in minutes, the values are the percentages. Keys should always be an int (round number) with double quotes. Value could be an int (round number) or a float (with decimals). \"roi\" : { \"0\" : 5 , \"60\" : 4 , \"120\" : 3.5 } This configuration means positions will always be closed if the profit is higher than 5%. After an hour (60 minutes) the position will automatically be closed if the profit is higher than 4%. Even the smallest change in the ROI could mean a huge difference when it comes to profit. Stop loss # How to use 'Stop Loss' # A Stop-Loss is an advanced order that is used by traders that limits any form of additional losses. When a specific price is met, the order is triggered. An example would be that buying in at 100 would stop any form of losses at 95. In this case the stop-loss treshold would be -5%. Similarly, it can be done for a profit where one can set it to +5%, which in turn would mean the profit would be capped at 105. This in itself can be modified in any increment. The stoploss (SL) function is to prevent extreme loses. The SL value in the configuration file could be a float (with decimals) or an int (round number). \"stoploss\" : \"-0.5\" , This configuration means positions will always be closed if the profit is lower than -0.5%. Custom Stop loss # Alternatively, currently we have 3 options in terms of stop loss configurations. { \"name\" : \"stoploss-type\" , \"default\" : \"standard\" , \"options\" : [ \"standard\" , \"trailing\" , \"dynamic\" ], \"type\" : \"string\" , \"cli\" : { \"short\" : \"sl_type\" } } As seen in the code above, these three consists out of the following: 'standard' -> standard stoploss calculation based on the price when opening a trade (requires 'stoploss' percentage) 'trailing' -> trailing stoploss function (requires 'stoploss' percentage) 'dynamic' -> configurable stoploss function that can be changed in my_strategy_advanced.py In the advanced_strategy.py file an example can be seen in terms of the 'dynamic' stop loss; the snippet of code underneath is what you'd find in the file. Following the presented code, you'll be able to implement a dynamic stop loss. def stoploss ( self , dataframe : DataFrame ) -> DataFrame : \"\"\" Override this method if you want to dynamically change the stoploss for every trade. If not, the stoploss provided in config.json will be returned. IMPORTANT: this function is only called when in the config.json \"stoploss-type\" is: -> \"stoploss-type\": \"dynamic\" :param dataframe: dataframe filled with indicators from generate_indicators :type dataframe: Dataframe :return: dataframe filled with dynamic stoploss signals :rtype: DataFrame \"\"\" # BEGIN STRATEGY dataframe [ 'stoploss' ] = dataframe [ 'ema5' ] # END STRATEGY OHLCV # OHLCV, also known as: O pen H igh L ow C lose V olume Can be used to trade in an easy fashion. A simple example for this would be by using the close. The close is the end value of the current candle, where it closes and goes into a new candle. dataframe . loc [ ( ( dataframe [ 'close' ] < 50 ) ), 'buy' ] = 1 Which means you'll buy an asset when the close is below 50. This can be adjusted as you see fit, however, the general jist of it is that all the OHLCV can be used in a similar fashion. How to use 'if statements with candles' and elucidating timeframes # When generating your indicators, ensure that what you type down makes sense. For example: if current_candle [ 'close' ] > current_candle [ 'ma200' ]: Will result in an error due to the fact that the candle will be marked as close yet it is supposed to surpass the past 200 point timeframe average. A correct example on how to use an if statement would be: if int ( timestamp ) > time : ohlcv = data_dict [ timestamp ] Or dataframe . loc [ ( ( dataframe [ 'ma10' ] < dataframe [ 'ma100' ]) ), 'buy' ] = 1 Albeit, the latter is already a timeframe module and would already be a part of a possible strategy. Changing the timeframe can make a huge difference; if you apply a short timeframe and put it up against a large timeframe as presented in the second example, you can detect shorts and act on them! Plotting # The plotting functionality can give you a more in-depth insight in the behaviour of the indicators you use, and the buy and sell signals that your algorithm generates. In order to activate this functionality, set \u2018plots\u2019 to true in your config file, and add the main plot and subplot indicators you wish to see. \"plots\" : true , \"mainplot_indicators\" : [ \"ema5\" , \"ema21\" ], \"subplot_indicators\" : [ \"volume\" ] The plots will be done per coin, and can for example be found here: data/backtesting-data/binance/plotETHUSDT.html Getting started # Now you've seen how we configured all the basic settings and buy/sell signals. From now on, you can start working on your very own trading algorithms . More information regarding this can be found on the strategies page.","title":"Configuring Backtesting"},{"location":"getting_started/installation/configuring_backtest/#configuring-your-backtest","text":"","title":"Configuring your backtest"},{"location":"getting_started/installation/configuring_backtest/#configuration","text":"In the config.json file you will find all necessary and important configuration options.","title":"Configuration"},{"location":"getting_started/installation/configuring_backtest/#roi","text":"The ROI table in the configuration is used to sell at a certain percentage of profit after a defined time. The keys in the dictionary are in minutes, the values are the percentages. Keys should always be an int (round number) with double quotes. Value could be an int (round number) or a float (with decimals). \"roi\" : { \"0\" : 5 , \"60\" : 4 , \"120\" : 3.5 } This configuration means positions will always be closed if the profit is higher than 5%. After an hour (60 minutes) the position will automatically be closed if the profit is higher than 4%. Even the smallest change in the ROI could mean a huge difference when it comes to profit.","title":"ROI"},{"location":"getting_started/installation/configuring_backtest/#stop-loss","text":"","title":"Stop loss"},{"location":"getting_started/installation/configuring_backtest/#how-to-use-stop-loss","text":"A Stop-Loss is an advanced order that is used by traders that limits any form of additional losses. When a specific price is met, the order is triggered. An example would be that buying in at 100 would stop any form of losses at 95. In this case the stop-loss treshold would be -5%. Similarly, it can be done for a profit where one can set it to +5%, which in turn would mean the profit would be capped at 105. This in itself can be modified in any increment. The stoploss (SL) function is to prevent extreme loses. The SL value in the configuration file could be a float (with decimals) or an int (round number). \"stoploss\" : \"-0.5\" , This configuration means positions will always be closed if the profit is lower than -0.5%.","title":"How to use 'Stop Loss'"},{"location":"getting_started/installation/configuring_backtest/#custom-stop-loss","text":"Alternatively, currently we have 3 options in terms of stop loss configurations. { \"name\" : \"stoploss-type\" , \"default\" : \"standard\" , \"options\" : [ \"standard\" , \"trailing\" , \"dynamic\" ], \"type\" : \"string\" , \"cli\" : { \"short\" : \"sl_type\" } } As seen in the code above, these three consists out of the following: 'standard' -> standard stoploss calculation based on the price when opening a trade (requires 'stoploss' percentage) 'trailing' -> trailing stoploss function (requires 'stoploss' percentage) 'dynamic' -> configurable stoploss function that can be changed in my_strategy_advanced.py In the advanced_strategy.py file an example can be seen in terms of the 'dynamic' stop loss; the snippet of code underneath is what you'd find in the file. Following the presented code, you'll be able to implement a dynamic stop loss. def stoploss ( self , dataframe : DataFrame ) -> DataFrame : \"\"\" Override this method if you want to dynamically change the stoploss for every trade. If not, the stoploss provided in config.json will be returned. IMPORTANT: this function is only called when in the config.json \"stoploss-type\" is: -> \"stoploss-type\": \"dynamic\" :param dataframe: dataframe filled with indicators from generate_indicators :type dataframe: Dataframe :return: dataframe filled with dynamic stoploss signals :rtype: DataFrame \"\"\" # BEGIN STRATEGY dataframe [ 'stoploss' ] = dataframe [ 'ema5' ] # END STRATEGY","title":"Custom Stop loss"},{"location":"getting_started/installation/configuring_backtest/#ohlcv","text":"OHLCV, also known as: O pen H igh L ow C lose V olume Can be used to trade in an easy fashion. A simple example for this would be by using the close. The close is the end value of the current candle, where it closes and goes into a new candle. dataframe . loc [ ( ( dataframe [ 'close' ] < 50 ) ), 'buy' ] = 1 Which means you'll buy an asset when the close is below 50. This can be adjusted as you see fit, however, the general jist of it is that all the OHLCV can be used in a similar fashion.","title":"OHLCV"},{"location":"getting_started/installation/configuring_backtest/#how-to-use-if-statements-with-candles-and-elucidating-timeframes","text":"When generating your indicators, ensure that what you type down makes sense. For example: if current_candle [ 'close' ] > current_candle [ 'ma200' ]: Will result in an error due to the fact that the candle will be marked as close yet it is supposed to surpass the past 200 point timeframe average. A correct example on how to use an if statement would be: if int ( timestamp ) > time : ohlcv = data_dict [ timestamp ] Or dataframe . loc [ ( ( dataframe [ 'ma10' ] < dataframe [ 'ma100' ]) ), 'buy' ] = 1 Albeit, the latter is already a timeframe module and would already be a part of a possible strategy. Changing the timeframe can make a huge difference; if you apply a short timeframe and put it up against a large timeframe as presented in the second example, you can detect shorts and act on them!","title":"How to use 'if statements with candles' and elucidating timeframes"},{"location":"getting_started/installation/configuring_backtest/#plotting","text":"The plotting functionality can give you a more in-depth insight in the behaviour of the indicators you use, and the buy and sell signals that your algorithm generates. In order to activate this functionality, set \u2018plots\u2019 to true in your config file, and add the main plot and subplot indicators you wish to see. \"plots\" : true , \"mainplot_indicators\" : [ \"ema5\" , \"ema21\" ], \"subplot_indicators\" : [ \"volume\" ] The plots will be done per coin, and can for example be found here: data/backtesting-data/binance/plotETHUSDT.html","title":"Plotting"},{"location":"getting_started/installation/configuring_backtest/#getting-started","text":"Now you've seen how we configured all the basic settings and buy/sell signals. From now on, you can start working on your very own trading algorithms . More information regarding this can be found on the strategies page.","title":"Getting started"},{"location":"getting_started/installation/github_desktop/","text":"Github Desktop. # How to use Github Desktop. # We use Github Desktop for version control, allowing you to organize your strategies and share them with us. The following steps should help you set it up. Installing Github Desktop # Download and install Github Desktop. Go to Github.com and navigate to the repository you want to work on. Click the green 'Code' button, and copy the URL you see. Open the Github Desktop client and go to File > Clone Repository . Click the URL tab, paste in the URL, select a destination folder on your machine and click 'Clone'. Now that you have the repository folder locally on your machine, any change that you make in that folder will be noted by Github Desktop. Using Github Desktop # Commit your work regularly. Committing is 'saving' the current state of your folder. You can commit by typing a commit message (i.e. what did you change) in the bottom left panel of Github Desktop and press 'Commit'. Now that you have committed your changes, you want to 'Push' the commit to the repository. This synchronizes the repository with your changes. Click the 'Push' button in the top middle. You should now have Github Desktop up and running! For more information, please refer to the Github Desktop documentation .","title":"Github Desktop"},{"location":"getting_started/installation/github_desktop/#github-desktop","text":"","title":"Github Desktop."},{"location":"getting_started/installation/github_desktop/#how-to-use-github-desktop","text":"We use Github Desktop for version control, allowing you to organize your strategies and share them with us. The following steps should help you set it up.","title":"How to use Github Desktop."},{"location":"getting_started/installation/github_desktop/#installing-github-desktop","text":"Download and install Github Desktop. Go to Github.com and navigate to the repository you want to work on. Click the green 'Code' button, and copy the URL you see. Open the Github Desktop client and go to File > Clone Repository . Click the URL tab, paste in the URL, select a destination folder on your machine and click 'Clone'. Now that you have the repository folder locally on your machine, any change that you make in that folder will be noted by Github Desktop.","title":"Installing Github Desktop"},{"location":"getting_started/installation/github_desktop/#using-github-desktop","text":"Commit your work regularly. Committing is 'saving' the current state of your folder. You can commit by typing a commit message (i.e. what did you change) in the bottom left panel of Github Desktop and press 'Commit'. Now that you have committed your changes, you want to 'Push' the commit to the repository. This synchronizes the repository with your changes. Click the 'Push' button in the top middle. You should now have Github Desktop up and running! For more information, please refer to the Github Desktop documentation .","title":"Using Github Desktop"},{"location":"getting_started/installation/installation/","text":"Installing and getting started # There are multiple ways to run our Backtesting Engine. For each way, the installation steps are outlined on separate pages. The pages are outlined below. Getting started with Docker (any platform) # Getting started for MacOS / Linux # Getting started for Windows # Are you running on an MacOS machine with a M1 processor? M1 processors need another approach. Please visit this page if you have a M1 chip. Currently, we recommend to use Docker for running our Engine. If you are not familiar with Docker, please use the normal way of installing and running. Utilities # The following utilities will make your life much easier during strategy development: A code editor such as Pycharm or VSCode Running without Docker? You will have to manually download the repository on your computer. This can be done by downloading the zip file or by cloning the engine using Github Desktop (or something similar).","title":"Installing"},{"location":"getting_started/installation/installation/#installing-and-getting-started","text":"There are multiple ways to run our Backtesting Engine. For each way, the installation steps are outlined on separate pages. The pages are outlined below.","title":"Installing and getting started"},{"location":"getting_started/installation/installation/#getting-started-with-docker-any-platform","text":"","title":"Getting started with Docker (any platform)"},{"location":"getting_started/installation/installation/#getting-started-for-macos-linux","text":"","title":"Getting started for MacOS / Linux"},{"location":"getting_started/installation/installation/#getting-started-for-windows","text":"Are you running on an MacOS machine with a M1 processor? M1 processors need another approach. Please visit this page if you have a M1 chip. Currently, we recommend to use Docker for running our Engine. If you are not familiar with Docker, please use the normal way of installing and running.","title":"Getting started for Windows"},{"location":"getting_started/installation/installation/#utilities","text":"The following utilities will make your life much easier during strategy development: A code editor such as Pycharm or VSCode Running without Docker? You will have to manually download the repository on your computer. This can be done by downloading the zip file or by cloning the engine using Github Desktop (or something similar).","title":"Utilities"},{"location":"getting_started/installation/mac_os/","text":"Getting started for MacOS / Linux # Using MacOS with M1 chip? If you are running on a Mac with a M1 chip, please continue reading here How to install on MacOS with Python # Installing the Engine on a MAC-OS requires the following steps: Install Python 3 ( click here to download Python ) Install Homebrew (recommended). Installing homebrew can be done by copying the following line into your terminal app: /bin/bash -c \"$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)\" OR Make sure pip is installed (alternative) (Pip should be installed automatically on any version of Python that is 3 or above. If it is not installed on your system click here ) Download and install Xcode12 Install the TA-Lib dependencies ( follow the instructions given underneath the dependencies header ) Install TA-Lib By using Homebrew: (recommended) brew install ta-lib By using pip: (alternative) pip install ta-lib Clone the Engine github repository on your computer. Continue by reading Running with Python #","title":"Installing on MacOS / Linux"},{"location":"getting_started/installation/mac_os/#getting-started-for-macos-linux","text":"Using MacOS with M1 chip? If you are running on a Mac with a M1 chip, please continue reading here","title":"Getting started for MacOS / Linux"},{"location":"getting_started/installation/mac_os/#how-to-install-on-macos-with-python","text":"Installing the Engine on a MAC-OS requires the following steps: Install Python 3 ( click here to download Python ) Install Homebrew (recommended). Installing homebrew can be done by copying the following line into your terminal app: /bin/bash -c \"$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)\" OR Make sure pip is installed (alternative) (Pip should be installed automatically on any version of Python that is 3 or above. If it is not installed on your system click here ) Download and install Xcode12 Install the TA-Lib dependencies ( follow the instructions given underneath the dependencies header ) Install TA-Lib By using Homebrew: (recommended) brew install ta-lib By using pip: (alternative) pip install ta-lib Clone the Engine github repository on your computer.","title":"How to install on MacOS with Python"},{"location":"getting_started/installation/mac_os/#continue-by-reading-running-with-python","text":"","title":"Continue by reading Running with Python"},{"location":"getting_started/installation/mac_os_m1/","text":"Getting started on MacOS (M1 Chip) # Apple Silicon M1 Chip # With the new M1 Chip by Apple Silicon, there are several compatibility issues with the packages required. While Docker works; TA-Lib, Pandas, and even Numpy are not compatible with the chip as of yet. The M1 Chip operates with ARM rather than x86, causing issues with regards to these Python packages. Sadly, this is not something we can fix ourselves, as this is on the creators behind these packages and Apple itself. However, there are a few solutions that might help you to make it work on your Apple M1 machine. Open your Terminal application with Rosetta 2 and then run the script. You're ready to go! If it doesn't work with Rosetta, don't worry! There is another solution. Just follow these steps: Download Xcode12 Install Miniforge Create and activate a Conda environment with the following commands (don't forget to start up a new .zsh session after having installed Miniforge) conda create --name mytf conda activate mytf Use conda to install Python 3.8 and TA-lib in your new environment with the following commands: conda install -y python==3.8.6 conda install -y pandas TA-Lib The engine is now ready to run on your Apple M1 machine. Continue by reading Running with Python #","title":"Installing with M1 chip"},{"location":"getting_started/installation/mac_os_m1/#getting-started-on-macos-m1-chip","text":"","title":"Getting started on MacOS (M1 Chip)"},{"location":"getting_started/installation/mac_os_m1/#apple-silicon-m1-chip","text":"With the new M1 Chip by Apple Silicon, there are several compatibility issues with the packages required. While Docker works; TA-Lib, Pandas, and even Numpy are not compatible with the chip as of yet. The M1 Chip operates with ARM rather than x86, causing issues with regards to these Python packages. Sadly, this is not something we can fix ourselves, as this is on the creators behind these packages and Apple itself. However, there are a few solutions that might help you to make it work on your Apple M1 machine. Open your Terminal application with Rosetta 2 and then run the script. You're ready to go! If it doesn't work with Rosetta, don't worry! There is another solution. Just follow these steps: Download Xcode12 Install Miniforge Create and activate a Conda environment with the following commands (don't forget to start up a new .zsh session after having installed Miniforge) conda create --name mytf conda activate mytf Use conda to install Python 3.8 and TA-lib in your new environment with the following commands: conda install -y python==3.8.6 conda install -y pandas TA-Lib The engine is now ready to run on your Apple M1 machine.","title":"Apple Silicon M1 Chip"},{"location":"getting_started/installation/mac_os_m1/#continue-by-reading-running-with-python","text":"","title":"Continue by reading Running with Python"},{"location":"getting_started/installation/windows/","text":"Getting started for Windows # How to install on a Windows device (without Docker) # Installing the Engine on a Windows device requires the following steps: Install Python 3 ( click here to download Python ) Make sure pip is installed (Pip should be installed automatically on any version of Python that is 3 or above. If it is not installed on your system click here ) Find your current operating system. This can be found in system settings (either 32-bit or 64-bit). Go to this link and search the page for \"ta-lib\". If you have a 64-bit operating system download: TA_Lib\u20110.4.20\u2011cp38\u2011cp38\u2011win_amd64.whl If you have a 32-bit operating system download: TA_Lib\u20110.4.20\u2011cp38\u2011cp38\u2011win32.whl Open a terminal (e.g. Windows Powershell) and change to the downloads folder: cd [PATH/TO/DOWNLOADS/FOLDER] Install the TA-lib wheel by running this command: pip install [TA_Lib-wheel].whl Clone the Engine github repository on your computer. Continue by reading Running with Python #","title":"Installing on Windows"},{"location":"getting_started/installation/windows/#getting-started-for-windows","text":"","title":"Getting started for Windows"},{"location":"getting_started/installation/windows/#how-to-install-on-a-windows-device-without-docker","text":"Installing the Engine on a Windows device requires the following steps: Install Python 3 ( click here to download Python ) Make sure pip is installed (Pip should be installed automatically on any version of Python that is 3 or above. If it is not installed on your system click here ) Find your current operating system. This can be found in system settings (either 32-bit or 64-bit). Go to this link and search the page for \"ta-lib\". If you have a 64-bit operating system download: TA_Lib\u20110.4.20\u2011cp38\u2011cp38\u2011win_amd64.whl If you have a 32-bit operating system download: TA_Lib\u20110.4.20\u2011cp38\u2011cp38\u2011win32.whl Open a terminal (e.g. Windows Powershell) and change to the downloads folder: cd [PATH/TO/DOWNLOADS/FOLDER] Install the TA-lib wheel by running this command: pip install [TA_Lib-wheel].whl Clone the Engine github repository on your computer.","title":"How to install on a Windows device (without Docker)"},{"location":"getting_started/installation/windows/#continue-by-reading-running-with-python","text":"","title":"Continue by reading Running with Python"},{"location":"getting_started/running/running_docker/","text":"Quickstart using Docker # Attention This guide assumes that docker and docker-compose are already installed on your system. ( click here to download Docker ) Installing # The following commands will initialise the file structure used by the Engine. Run the commands in your terminal. You only need to do this once! # Make a new directory mkdir dema-engine cd dema-engine # Initialize the dema-engine workspace docker run -v \"$PWD:/usr/src/engine/output\" dematrading/engine:stable init The above snippet creates a new directory called 'dema-engine' and changes the working directory to the folder we just created. Notice how a config file, a strategy file and a backtesting folder have been created. Those will be used when running the Engine. Backtesting # Once this is done, you're ready to start the first backtest. This can be done by running the command below. # Run your first backtest docker-compose up By default, the backtest will run the sample strategy provided. This is just a reference to get you started. Don't expect it to be profitable already, as you should adjust it to your own strategy! Updating the Engine with docker-compose # Updating is done by running the following command: # Update the engine docker-compose pull The above command will pull the newest version of the Engine for you. Thats all there is to it! The next time you run a backtest, the newest version will be used. Whats next? # You are now ready to start developing your own strategies! Get started by reading examples of strategies . Or have a look at configuring backtesting","title":"Running The Engine (Docker)"},{"location":"getting_started/running/running_docker/#quickstart-using-docker","text":"Attention This guide assumes that docker and docker-compose are already installed on your system. ( click here to download Docker )","title":"Quickstart using Docker"},{"location":"getting_started/running/running_docker/#installing","text":"The following commands will initialise the file structure used by the Engine. Run the commands in your terminal. You only need to do this once! # Make a new directory mkdir dema-engine cd dema-engine # Initialize the dema-engine workspace docker run -v \"$PWD:/usr/src/engine/output\" dematrading/engine:stable init The above snippet creates a new directory called 'dema-engine' and changes the working directory to the folder we just created. Notice how a config file, a strategy file and a backtesting folder have been created. Those will be used when running the Engine.","title":"Installing"},{"location":"getting_started/running/running_docker/#backtesting","text":"Once this is done, you're ready to start the first backtest. This can be done by running the command below. # Run your first backtest docker-compose up By default, the backtest will run the sample strategy provided. This is just a reference to get you started. Don't expect it to be profitable already, as you should adjust it to your own strategy!","title":"Backtesting"},{"location":"getting_started/running/running_docker/#updating-the-engine-with-docker-compose","text":"Updating is done by running the following command: # Update the engine docker-compose pull The above command will pull the newest version of the Engine for you. Thats all there is to it! The next time you run a backtest, the newest version will be used.","title":"Updating the Engine with docker-compose"},{"location":"getting_started/running/running_docker/#whats-next","text":"You are now ready to start developing your own strategies! Get started by reading examples of strategies . Or have a look at configuring backtesting","title":"Whats next?"},{"location":"getting_started/running/running_python/","text":"Running the Engine with Python # Running our engine with Python is not recommended. Only run it with Python when lacking knowledge of Docker. Please have a look here for running it with Docker. First of all; it is important to have our repository downloaded and unzipped. Open the directory with the newly downloaded files. Install all the required packages pip install -r requirements.txt Now you can run the Engine by performing the following command: python main.py !!! attention Running without Docker? You will have to manually download the repository on your computer. This can be done by downloading the zip file or by cloning the engine using Github Desktop (or something similar).","title":"Running The Engine (Python)"},{"location":"getting_started/running/running_python/#running-the-engine-with-python","text":"Running our engine with Python is not recommended. Only run it with Python when lacking knowledge of Docker. Please have a look here for running it with Docker. First of all; it is important to have our repository downloaded and unzipped. Open the directory with the newly downloaded files. Install all the required packages pip install -r requirements.txt Now you can run the Engine by performing the following command: python main.py !!! attention Running without Docker? You will have to manually download the repository on your computer. This can be done by downloading the zip file or by cloning the engine using Github Desktop (or something similar).","title":"Running the Engine with Python"},{"location":"getting_started/strategies/advcreatingstrat/","text":"Advanced Algorithm Creation # TBA #","title":"Advanced strategy creation"},{"location":"getting_started/strategies/advcreatingstrat/#advanced-algorithm-creation","text":"","title":"Advanced Algorithm Creation"},{"location":"getting_started/strategies/advcreatingstrat/#tba","text":"","title":"TBA"},{"location":"getting_started/strategies/strategyexamples/","text":"Developing a strategy # On this page you will learn how to get started with developing your very own strategy. To give you a headstart, we included a sample strategy which can be found in /strategies/my_strategy.py . Sample strategy # How does our sample strategy work? We will guide you through the process. The sample can be found in /strategies/my_strategy.py . Attention Not all settings in this file need to be present. You can leave out, add, or change certain signals. This mostly pertains to the configurable parts; you can alter them, change them, and freely work around them as you please. Generate indicators # To be able to base our buy / sell signal on indicators, we need to generate these strategies. For this strategy we decided we want to use RSI and EMA indicators to trigger buys/sells. We can make the calculated value available to the buy/sell methods by adding it to the dataframe. Like this for example: dataframe['rsi'] = ta.RSI(dataframe) Attention Setting this to another value than the maximum span of candles used will result in distorted results or errors. Note When creating a strategy, make sure to include a 'timeperiod' in all of the talib functions. This means that you should turn dataframe [ 'rsi' ] = ta . RSI ( dataframe ) into: dataframe [ 'rsi' ] = ta . RSI ( dataframe , timeperiod = 14 ) Buy signal # In our buy signal, we set some conditions for our signal. In our implementation, the pair wil only be bought when all of the following conditions are true. current_candle [ 'rsi' ] < 30 current_candle [ 'ema5' ] < current_candle [ 'ema21' ] current_candle [ 'volume' ] > 0 Sell signal # In our sell signal, we set some conditions for our signal. In our implementation, the pair wil only be sold when all of the following conditions are true. Beside the sell signal, positions can be closed using the Stop Loss or Return on Investment configurations in the config.json file. current_candle [ 'rsi' ] > 70 current_candle [ 'volume' ] > 0 Minimum candles # On the top of my_strategy.py , min_candles is defined. This is used as an offset for the amount of candles needed to calculate the biggest indicator. In our case, SMA(21) needs atleast 21 candles to work properly. Therefore, we set min_candles to 21. Configuration # In the config.json file you will find all necessary and important configuration options. ROI # The ROI table in the configuration is used to sell at a certain percentage of profit after a defined time. The keys in the dictionary are in minutes, the values are the percentages. Keys should always be an int with double quotes. Value could be an int or a float . \"roi\" : { \"0\" : 5 , \"60\" : 4 , \"120\" : 3.5 } This configuration means positions will always be closed if the profit is higher than 5%. After an hour (60 minutes) the position will automatically be closed if the profit is higher than 4%. Stop loss # The stoploss (SL) function is to prevent extreme loses. The SL value in the configuration file could be a float or an int . \"stoploss\" : \"-0.5\" , This configuration means positions will always be closed if the profit is lower than -0.5%. Getting started # Now you've seen how we configured all the basic settings and buy/sell signals. From now on, you can start working on your very own trading algorithms . This guide will use a very simple method of finding the right indicators and using them in your strategy. Note Creating your own strategy might take some time. Don't give up too fast! On the bottom of the page we listed some reading and learning material to become more familiar with trading, coding and everything else. Finding indicators # Go to TradingView Select a view of any coin pair you're interested it (make sure to select 'cryptos'). Have a look at the graph and decide at what moments you'd like to buy / sell. Add some indicators to the graph. See whether the indicators could indicate your buy/sell positions. If you found some sort of pattern, go to the next step. Configuring indicators # You can have a look at the indicator_sample.py file under the strategies directory on how to configure indicators for your strategy. In this file, we have compiled a vast amount of Tradingview indicators along with the required int (whole numbers). The only thing you'd have to add yourself besides the presented code that contains the indicator you wish to use, is to add a timeperiod within the brackets to ensure that there's a scope in time during which you want to perform the backtest. Using indicators in sell/buy signal # Have a look at the sell signal or buy signal part of the sample strategy. Other python logic and external packages could be applied to the buy/sell signal, as long as it's a condition. This means, we can also use the following: current_candle . loc [ ( (( current_candle [ 'rsi' ] < 30 ) | ( current_candle [ 'rsi' ] > 40 )) & ( current_candle [ 'ema5' ] < current_candle [ 'ema21' ]) & ( current_candle [ 'volume' ] > 0 ) ), 'buy' ] = 1 In this case, a position opens when RSI is either below 30 or above 40. Configuring Stoploss / Return On Investment # Stoploss and ROI are really important when creating an algorithm. These will make sure you get the best from your strategy, while not putting everything is at risk.","title":"Strategy Examples"},{"location":"getting_started/strategies/strategyexamples/#developing-a-strategy","text":"On this page you will learn how to get started with developing your very own strategy. To give you a headstart, we included a sample strategy which can be found in /strategies/my_strategy.py .","title":"Developing a strategy"},{"location":"getting_started/strategies/strategyexamples/#sample-strategy","text":"How does our sample strategy work? We will guide you through the process. The sample can be found in /strategies/my_strategy.py . Attention Not all settings in this file need to be present. You can leave out, add, or change certain signals. This mostly pertains to the configurable parts; you can alter them, change them, and freely work around them as you please.","title":"Sample strategy"},{"location":"getting_started/strategies/strategyexamples/#generate-indicators","text":"To be able to base our buy / sell signal on indicators, we need to generate these strategies. For this strategy we decided we want to use RSI and EMA indicators to trigger buys/sells. We can make the calculated value available to the buy/sell methods by adding it to the dataframe. Like this for example: dataframe['rsi'] = ta.RSI(dataframe) Attention Setting this to another value than the maximum span of candles used will result in distorted results or errors. Note When creating a strategy, make sure to include a 'timeperiod' in all of the talib functions. This means that you should turn dataframe [ 'rsi' ] = ta . RSI ( dataframe ) into: dataframe [ 'rsi' ] = ta . RSI ( dataframe , timeperiod = 14 )","title":"Generate indicators"},{"location":"getting_started/strategies/strategyexamples/#buy-signal","text":"In our buy signal, we set some conditions for our signal. In our implementation, the pair wil only be bought when all of the following conditions are true. current_candle [ 'rsi' ] < 30 current_candle [ 'ema5' ] < current_candle [ 'ema21' ] current_candle [ 'volume' ] > 0","title":"Buy signal"},{"location":"getting_started/strategies/strategyexamples/#sell-signal","text":"In our sell signal, we set some conditions for our signal. In our implementation, the pair wil only be sold when all of the following conditions are true. Beside the sell signal, positions can be closed using the Stop Loss or Return on Investment configurations in the config.json file. current_candle [ 'rsi' ] > 70 current_candle [ 'volume' ] > 0","title":"Sell signal"},{"location":"getting_started/strategies/strategyexamples/#minimum-candles","text":"On the top of my_strategy.py , min_candles is defined. This is used as an offset for the amount of candles needed to calculate the biggest indicator. In our case, SMA(21) needs atleast 21 candles to work properly. Therefore, we set min_candles to 21.","title":"Minimum candles"},{"location":"getting_started/strategies/strategyexamples/#configuration","text":"In the config.json file you will find all necessary and important configuration options.","title":"Configuration"},{"location":"getting_started/strategies/strategyexamples/#roi","text":"The ROI table in the configuration is used to sell at a certain percentage of profit after a defined time. The keys in the dictionary are in minutes, the values are the percentages. Keys should always be an int with double quotes. Value could be an int or a float . \"roi\" : { \"0\" : 5 , \"60\" : 4 , \"120\" : 3.5 } This configuration means positions will always be closed if the profit is higher than 5%. After an hour (60 minutes) the position will automatically be closed if the profit is higher than 4%.","title":"ROI"},{"location":"getting_started/strategies/strategyexamples/#stop-loss","text":"The stoploss (SL) function is to prevent extreme loses. The SL value in the configuration file could be a float or an int . \"stoploss\" : \"-0.5\" , This configuration means positions will always be closed if the profit is lower than -0.5%.","title":"Stop loss"},{"location":"getting_started/strategies/strategyexamples/#getting-started","text":"Now you've seen how we configured all the basic settings and buy/sell signals. From now on, you can start working on your very own trading algorithms . This guide will use a very simple method of finding the right indicators and using them in your strategy. Note Creating your own strategy might take some time. Don't give up too fast! On the bottom of the page we listed some reading and learning material to become more familiar with trading, coding and everything else.","title":"Getting started"},{"location":"getting_started/strategies/strategyexamples/#finding-indicators","text":"Go to TradingView Select a view of any coin pair you're interested it (make sure to select 'cryptos'). Have a look at the graph and decide at what moments you'd like to buy / sell. Add some indicators to the graph. See whether the indicators could indicate your buy/sell positions. If you found some sort of pattern, go to the next step.","title":"Finding indicators"},{"location":"getting_started/strategies/strategyexamples/#configuring-indicators","text":"You can have a look at the indicator_sample.py file under the strategies directory on how to configure indicators for your strategy. In this file, we have compiled a vast amount of Tradingview indicators along with the required int (whole numbers). The only thing you'd have to add yourself besides the presented code that contains the indicator you wish to use, is to add a timeperiod within the brackets to ensure that there's a scope in time during which you want to perform the backtest.","title":"Configuring indicators"},{"location":"getting_started/strategies/strategyexamples/#using-indicators-in-sellbuy-signal","text":"Have a look at the sell signal or buy signal part of the sample strategy. Other python logic and external packages could be applied to the buy/sell signal, as long as it's a condition. This means, we can also use the following: current_candle . loc [ ( (( current_candle [ 'rsi' ] < 30 ) | ( current_candle [ 'rsi' ] > 40 )) & ( current_candle [ 'ema5' ] < current_candle [ 'ema21' ]) & ( current_candle [ 'volume' ] > 0 ) ), 'buy' ] = 1 In this case, a position opens when RSI is either below 30 or above 40.","title":"Using indicators in sell/buy signal"},{"location":"getting_started/strategies/strategyexamples/#configuring-stoploss-return-on-investment","text":"Stoploss and ROI are really important when creating an algorithm. These will make sure you get the best from your strategy, while not putting everything is at risk.","title":"Configuring Stoploss / Return On Investment"},{"location":"getting_started/trading101/contributing/","text":"Contributing # Extra information # If you have trouble understanding our engine, the following resources could be useful for increasing your Python, trading, and technical skills. - TA-lib functions all supported indicators by ta-lib. - Python coding codecademy offers coding for almost all languages, including Python . - More Python coding learnpython provides an interactive Python course in which you can get a certificate which in turn you can use on your LinkedIn as well. - Even more Python coding Datacamp provides more advanced (and beginner) courses that can help you get even more Python knowledge. - Trading skills babypips provides a good set of courses to assist in terms of learning how to do Forex trading . Python coding guidelines # Python uses PEP-8 , which is the style guide for it. These would be the coding guidelines in order for your code to work correspondently and be readable to anyone following the guidelines. While certain aspects of it aren't completely mandatory, it is adviced you stick to these guidelines as well as you can to prevent any errors happening due to breaking said guidelines.","title":"Contributing"},{"location":"getting_started/trading101/contributing/#contributing","text":"","title":"Contributing"},{"location":"getting_started/trading101/contributing/#extra-information","text":"If you have trouble understanding our engine, the following resources could be useful for increasing your Python, trading, and technical skills. - TA-lib functions all supported indicators by ta-lib. - Python coding codecademy offers coding for almost all languages, including Python . - More Python coding learnpython provides an interactive Python course in which you can get a certificate which in turn you can use on your LinkedIn as well. - Even more Python coding Datacamp provides more advanced (and beginner) courses that can help you get even more Python knowledge. - Trading skills babypips provides a good set of courses to assist in terms of learning how to do Forex trading .","title":"Extra information"},{"location":"getting_started/trading101/contributing/#python-coding-guidelines","text":"Python uses PEP-8 , which is the style guide for it. These would be the coding guidelines in order for your code to work correspondently and be readable to anyone following the guidelines. While certain aspects of it aren't completely mandatory, it is adviced you stick to these guidelines as well as you can to prevent any errors happening due to breaking said guidelines.","title":"Python coding guidelines"},{"location":"getting_started/trading101/termsheet/","text":"Termsheet # Hold # A Hold is holding your assets. The assets itself can be held for a considerable amount of time. A hold basically just means that if you hold it, you keep it in your wallet for a certain amount of time. Fiat # Fiat is any kind of government issued currency that is not backed by any kind of commodity such as gold or silver. Margin # Margin trading is using funds of other traders, who earn interest based on the market demand for funds. Margin trading is less common among cryptocurrency in comparison to the stock market however, it certainly exists. Short # A short (or shorting) means that you're aiming to sell an asset at a short-ratio in the aims of buying it when it hits a lower price. Basically, it is short-term selling; you buy in at a price, aiming to sell higher, wanting to buy in lower. Long # A long is taking on the position of investing in the same way as when you buy a stock, you buy it in at a position where you are comfortable with, aiming to let it increase over time (months to years, usually). Bid # A bid is the maximum price that a buyer is willing to pay for an asset. The bid price in most exchanges is depicted within the order book. Ask # 'Ask' refers to the minimum price a seller is willing to receive for their assets on the market. Just like with the 'bid', the 'ask' is depicted within the order book. Spread # A spread is the difference between the buy and sell prices that are quoted. Within spreads there are spread bets in which a trader makes a decision on whether the price of the coin might go up or down and will then make a profit or a loss based on whether their prediction is correct or not. The greater the price movement, the greater the profit or loss. Fee # A fee is the cost of the transaction costs when buying and/or transferring from one wallet to another wallet. Most exchanges have an innate fee based off a percentage, which you then have to pay upon every transaction. Realised drawdown # The realised drawdown is the percentage between the peak and the subsequent trough, meaning that if a trading account has 1000 USD in it, and the funds drop to 900USD before moving back to anything above 1000USD, then the trading account witnessed a 10% drawdown. If the trader sells at that point, it is a realised drawdown, given it has come to realisation. Seen drawdown # The seen drawdown is the percentage between the peak and the same as a realised drawdown, except that with the realised drawdown, you actually sold, and witnessed a drawdown. The seen drawdown is merely the peak-to-trough that has been witnessed. Market change # A market change depicts the change in the market from a 'bear' market, a stable market, or a 'bull' market. The meaning between these is that in a 'bear' market, the market itself is declining and it encourages selling, however crypto can be bought at a lower price during this market. In contrary, a 'bull' market encourages buying, but selling during a 'bull' market, profits can easily be made given the market trend is on the uprise. A stable market is a market that is mostly stable, slightly going up and down; a change between markets is what would be called a market change. TA # Technical Analysis (TA) is the historical analysis of a cryptocurrency, describing and analyzing the historic price and volume to predict a future movement of assets via the hands of several indicators such as the EMA, MACD, UO, and so forth. ROI # Return On Investment (ROI) is widely known in cryptocurrency, it is a ratio or percentage value that represents profitability or efficiency of a certain trade or agreement. It is a tool that's widely used - including strategies for DemaTrading. ROI can be portrayed in an absolute ratio (such as 0.35) or a value percentage (such as 35%). The calculation for ROI is as followed: ROI = ( Current Value - Total Cost ) / Total Cost A simple example would be as followed: Mary bought 100 BTC at a price of 1,000 USD, paying 10 dollars for each BTC. If the current price of BTC is 20 dollars, Mary would have reached an ROI of 1.00 or 100%. However, there are some limitations to ROI in itself as it does not take time in consideration. This means the efficiency is lower than it should be if a lot of time passes in comparison to an earlier timeslot. Let's show you via the hands of a quick example, using Mary again! Mary's BTC is worth 18 per BTC after 6 months of her initial investment of 1,000 USD (100 BTC). She waits another 6 months for a total of 12 months, causing the BTC to be worth 19 USD per BTC after the 12 months. During this period there were ups and downs, and thus a second trade could have made Mary more money if she had traded at the 6 month mark; the time lost along with the fact she could've traded yet again lowering the efficiency. Stop Loss # A Stop-Loss is an advanced order that is used by traders that limits any form of additional losses. When a specific price is met, the order is triggered. An example would be that buying in at 100 would stop any form of losses at 95. In this case the stop-loss treshold would be -5%. Similarly, it can be done for a profit where one can set it to +5%, which in turn would mean the profit would be capped at 105. OHLCV # OHLCV, also known as: O pen: the moment at which the candle starts. H igh: the highest point during the candle, usually depicted with a thin green line (if the current close went up in comparison to the previous close) or a thin red line (if the current close went down in comparison to the previous close) that sticks out of the close. L ow: the lowest point during the candle, usually depicted with a thin red line (if the current close went down in comparison to the previous close) or a thin green line (if the current close went up in comparison to the previous close) that sticks out of the close. C lose: the point at which the candle closes, the close dictates whether a candle ends up green or red after comparing it to the previous close (green if up, red if down) V olume: the total amount traded during this time period. Can be used to trade in an easy fashion as it takes all five of these time points in consideration.","title":"Termsheet"},{"location":"getting_started/trading101/termsheet/#termsheet","text":"","title":"Termsheet"},{"location":"getting_started/trading101/termsheet/#hold","text":"A Hold is holding your assets. The assets itself can be held for a considerable amount of time. A hold basically just means that if you hold it, you keep it in your wallet for a certain amount of time.","title":"Hold"},{"location":"getting_started/trading101/termsheet/#fiat","text":"Fiat is any kind of government issued currency that is not backed by any kind of commodity such as gold or silver.","title":"Fiat"},{"location":"getting_started/trading101/termsheet/#margin","text":"Margin trading is using funds of other traders, who earn interest based on the market demand for funds. Margin trading is less common among cryptocurrency in comparison to the stock market however, it certainly exists.","title":"Margin"},{"location":"getting_started/trading101/termsheet/#short","text":"A short (or shorting) means that you're aiming to sell an asset at a short-ratio in the aims of buying it when it hits a lower price. Basically, it is short-term selling; you buy in at a price, aiming to sell higher, wanting to buy in lower.","title":"Short"},{"location":"getting_started/trading101/termsheet/#long","text":"A long is taking on the position of investing in the same way as when you buy a stock, you buy it in at a position where you are comfortable with, aiming to let it increase over time (months to years, usually).","title":"Long"},{"location":"getting_started/trading101/termsheet/#bid","text":"A bid is the maximum price that a buyer is willing to pay for an asset. The bid price in most exchanges is depicted within the order book.","title":"Bid"},{"location":"getting_started/trading101/termsheet/#ask","text":"'Ask' refers to the minimum price a seller is willing to receive for their assets on the market. Just like with the 'bid', the 'ask' is depicted within the order book.","title":"Ask"},{"location":"getting_started/trading101/termsheet/#spread","text":"A spread is the difference between the buy and sell prices that are quoted. Within spreads there are spread bets in which a trader makes a decision on whether the price of the coin might go up or down and will then make a profit or a loss based on whether their prediction is correct or not. The greater the price movement, the greater the profit or loss.","title":"Spread"},{"location":"getting_started/trading101/termsheet/#fee","text":"A fee is the cost of the transaction costs when buying and/or transferring from one wallet to another wallet. Most exchanges have an innate fee based off a percentage, which you then have to pay upon every transaction.","title":"Fee"},{"location":"getting_started/trading101/termsheet/#realised-drawdown","text":"The realised drawdown is the percentage between the peak and the subsequent trough, meaning that if a trading account has 1000 USD in it, and the funds drop to 900USD before moving back to anything above 1000USD, then the trading account witnessed a 10% drawdown. If the trader sells at that point, it is a realised drawdown, given it has come to realisation.","title":"Realised drawdown"},{"location":"getting_started/trading101/termsheet/#seen-drawdown","text":"The seen drawdown is the percentage between the peak and the same as a realised drawdown, except that with the realised drawdown, you actually sold, and witnessed a drawdown. The seen drawdown is merely the peak-to-trough that has been witnessed.","title":"Seen drawdown"},{"location":"getting_started/trading101/termsheet/#market-change","text":"A market change depicts the change in the market from a 'bear' market, a stable market, or a 'bull' market. The meaning between these is that in a 'bear' market, the market itself is declining and it encourages selling, however crypto can be bought at a lower price during this market. In contrary, a 'bull' market encourages buying, but selling during a 'bull' market, profits can easily be made given the market trend is on the uprise. A stable market is a market that is mostly stable, slightly going up and down; a change between markets is what would be called a market change.","title":"Market change"},{"location":"getting_started/trading101/termsheet/#ta","text":"Technical Analysis (TA) is the historical analysis of a cryptocurrency, describing and analyzing the historic price and volume to predict a future movement of assets via the hands of several indicators such as the EMA, MACD, UO, and so forth.","title":"TA"},{"location":"getting_started/trading101/termsheet/#roi","text":"Return On Investment (ROI) is widely known in cryptocurrency, it is a ratio or percentage value that represents profitability or efficiency of a certain trade or agreement. It is a tool that's widely used - including strategies for DemaTrading. ROI can be portrayed in an absolute ratio (such as 0.35) or a value percentage (such as 35%). The calculation for ROI is as followed: ROI = ( Current Value - Total Cost ) / Total Cost A simple example would be as followed: Mary bought 100 BTC at a price of 1,000 USD, paying 10 dollars for each BTC. If the current price of BTC is 20 dollars, Mary would have reached an ROI of 1.00 or 100%. However, there are some limitations to ROI in itself as it does not take time in consideration. This means the efficiency is lower than it should be if a lot of time passes in comparison to an earlier timeslot. Let's show you via the hands of a quick example, using Mary again! Mary's BTC is worth 18 per BTC after 6 months of her initial investment of 1,000 USD (100 BTC). She waits another 6 months for a total of 12 months, causing the BTC to be worth 19 USD per BTC after the 12 months. During this period there were ups and downs, and thus a second trade could have made Mary more money if she had traded at the 6 month mark; the time lost along with the fact she could've traded yet again lowering the efficiency.","title":"ROI"},{"location":"getting_started/trading101/termsheet/#stop-loss","text":"A Stop-Loss is an advanced order that is used by traders that limits any form of additional losses. When a specific price is met, the order is triggered. An example would be that buying in at 100 would stop any form of losses at 95. In this case the stop-loss treshold would be -5%. Similarly, it can be done for a profit where one can set it to +5%, which in turn would mean the profit would be capped at 105.","title":"Stop Loss"},{"location":"getting_started/trading101/termsheet/#ohlcv","text":"OHLCV, also known as: O pen: the moment at which the candle starts. H igh: the highest point during the candle, usually depicted with a thin green line (if the current close went up in comparison to the previous close) or a thin red line (if the current close went down in comparison to the previous close) that sticks out of the close. L ow: the lowest point during the candle, usually depicted with a thin red line (if the current close went down in comparison to the previous close) or a thin green line (if the current close went up in comparison to the previous close) that sticks out of the close. C lose: the point at which the candle closes, the close dictates whether a candle ends up green or red after comparing it to the previous close (green if up, red if down) V olume: the total amount traded during this time period. Can be used to trade in an easy fashion as it takes all five of these time points in consideration.","title":"OHLCV"},{"location":"getting_started/trading101/trading101/","text":"Trading 101. # A basic guide to trading. # Getting started with trading. # To start with trading, the first thing you need is volume in one of the coins you desire to trade with. With this volume, you can both sell and buy; selling means selling your current liquidity (in the form of crypto) at the price given at the current prize (usually displayed within the candle and via the book order). Buying means buying, simply buying the asset at the current prize which - just like selling - shows via the candles and the book order. This in itself is a trade. Candles and book orders will display real-time buy and sell orders that indicate your loss or profit from the point you've bought at. More on these terms can be found under basic terms. So what does that mean for me? # In itself it means that with the right buys at the right time and the right sales at the right time, you can earn money via your assets (in crypto). Trading has a lot of success stories and we aim to assist further in that. So what can DemaTrading do for me? # As explained on other pages, DemaTrading can assist you in automating and optimizing your strategy. A strategy is an approach to the current market, which will look at several factors such as ROI, the current values, the stop-loss, and so forth. The benefits of using automatized trading is that it will automatically do these processes for you even when you're not there to perform the actual trade. That means that even if you are far away, the bot itself will still continue on to perform trades given the configuration you've given it. The configuration itself can be adjusted fairly easily which can be seen in pages such as the strategy examples page or the page of creating strategies. I keep seeing all these terms and I'm not sure what they all mean! # Don't be afraid! There are a lot of terms that can frighten you, but most of them will be described in the basic terms and the advanced terms. We aim to give you more knowledge for both you and your strategies; this in return, allows you to be able to have more knowledge and make your strategies and/or knowledge into an optimized bot.","title":"Trading Basics"},{"location":"getting_started/trading101/trading101/#trading-101","text":"","title":"Trading 101."},{"location":"getting_started/trading101/trading101/#a-basic-guide-to-trading","text":"","title":"A basic guide to trading."},{"location":"getting_started/trading101/trading101/#getting-started-with-trading","text":"To start with trading, the first thing you need is volume in one of the coins you desire to trade with. With this volume, you can both sell and buy; selling means selling your current liquidity (in the form of crypto) at the price given at the current prize (usually displayed within the candle and via the book order). Buying means buying, simply buying the asset at the current prize which - just like selling - shows via the candles and the book order. This in itself is a trade. Candles and book orders will display real-time buy and sell orders that indicate your loss or profit from the point you've bought at. More on these terms can be found under basic terms.","title":"Getting started with trading."},{"location":"getting_started/trading101/trading101/#so-what-does-that-mean-for-me","text":"In itself it means that with the right buys at the right time and the right sales at the right time, you can earn money via your assets (in crypto). Trading has a lot of success stories and we aim to assist further in that.","title":"So what does that mean for me?"},{"location":"getting_started/trading101/trading101/#so-what-can-dematrading-do-for-me","text":"As explained on other pages, DemaTrading can assist you in automating and optimizing your strategy. A strategy is an approach to the current market, which will look at several factors such as ROI, the current values, the stop-loss, and so forth. The benefits of using automatized trading is that it will automatically do these processes for you even when you're not there to perform the actual trade. That means that even if you are far away, the bot itself will still continue on to perform trades given the configuration you've given it. The configuration itself can be adjusted fairly easily which can be seen in pages such as the strategy examples page or the page of creating strategies.","title":"So what can DemaTrading do for me?"},{"location":"getting_started/trading101/trading101/#i-keep-seeing-all-these-terms-and-im-not-sure-what-they-all-mean","text":"Don't be afraid! There are a lot of terms that can frighten you, but most of them will be described in the basic terms and the advanced terms. We aim to give you more knowledge for both you and your strategies; this in return, allows you to be able to have more knowledge and make your strategies and/or knowledge into an optimized bot.","title":"I keep seeing all these terms and I'm not sure what they all mean!"},{"location":"troubleshooting/docker/","text":"Coming soon. #","title":"Docker"},{"location":"troubleshooting/docker/#coming-soon","text":"","title":"Coming soon."},{"location":"troubleshooting/mistakes/","text":"Strategy Mistakes # Getting Previous Candle # You can access data from previous candle using the following code in both buy_signal and sell_signal : index = len ( dataframe . index ) - 2 previous_candle = dataframe . iloc [ index ] Getting MACD values # Getting MACD values could give you some trouble. Therefore, use the example below for configuring MACD in your strategy. macd = ta . MACD ( dataframe ) dataframe [ 'macd' ] = macd [ 'macd' ] dataframe [ 'macdsig' ] = macd [ 'macdsignal' ] dataframe [ 'macdhist' ] = macd [ 'macdhist' ] Advanced configuration: macd = ta . MACD ( dataframe , fastperiod = 10 , slowperiod = 20 , signalperiod = 9 ) Using .mean() # If you are using .mean() in for example dataframe['volume'].mean() you should always add the .rolling() before the .mean, otherwise the average would be based on ALL of the available data from the dataframe. See the code example below: dataframe [ 'volume' ] . rolling ( 14 ) . mean () In this case, we use the last 14 candles to calculate the average volume.","title":"Strategy mistakes"},{"location":"troubleshooting/mistakes/#strategy-mistakes","text":"","title":"Strategy Mistakes"},{"location":"troubleshooting/mistakes/#getting-previous-candle","text":"You can access data from previous candle using the following code in both buy_signal and sell_signal : index = len ( dataframe . index ) - 2 previous_candle = dataframe . iloc [ index ]","title":"Getting Previous Candle"},{"location":"troubleshooting/mistakes/#getting-macd-values","text":"Getting MACD values could give you some trouble. Therefore, use the example below for configuring MACD in your strategy. macd = ta . MACD ( dataframe ) dataframe [ 'macd' ] = macd [ 'macd' ] dataframe [ 'macdsig' ] = macd [ 'macdsignal' ] dataframe [ 'macdhist' ] = macd [ 'macdhist' ] Advanced configuration: macd = ta . MACD ( dataframe , fastperiod = 10 , slowperiod = 20 , signalperiod = 9 )","title":"Getting MACD values"},{"location":"troubleshooting/mistakes/#using-mean","text":"If you are using .mean() in for example dataframe['volume'].mean() you should always add the .rolling() before the .mean, otherwise the average would be based on ALL of the available data from the dataframe. See the code example below: dataframe [ 'volume' ] . rolling ( 14 ) . mean () In this case, we use the last 14 candles to calculate the average volume.","title":"Using .mean()"},{"location":"troubleshooting/troubleshooting/","text":"Coming Soon #","title":"FAQ"},{"location":"troubleshooting/troubleshooting/#coming-soon","text":"","title":"Coming Soon"}]}